entity Platform {
    name String required,
    description String,
    accessLevel Long required min(1) max(10),
    version String,
    //https://blog.ippon.tech/create-a-simple-file-storage-through-database-with-jhipster/
    contents Blob,
    added Instant,
    updated Instant,
    active Boolean,
}

entity Agent {
    name String required,
    classification String,
    description String,
    installedOn Instant,
    uninstallDate Instant,
    active Boolean,
    deactivate Boolean,
    autoRegistered Boolean,
    approved Boolean
}

entity RegistrationSecret {
    uniqueValue String,
    numericalValue Integer,
}

entity RegistrationEvent {
    ipAddress String required,
    rawContents String,
    remotePort Integer,
    name String,    
    approved Boolean,
    registrationDate Instant
}

entity CallBack {
    ipAddress String required,
    url  String,
    remotePort Integer,
    timestamp Instant,
    buffer String,
    rawcontents Blob,
}

/**
 * Task entity.
 * @author The JHipster team.
 */
entity Task {
    command String,
    formattedCommand String,
    submittedBy String,
    description String,
    added Instant,
    updated Instant,
    retrieved Boolean,
    failure Boolean,
    approved Boolean,
}

entity TaskResult {
    /**
    * The firstname attribute.
    */
    embeddeddata Blob,
    added Instant,
    reviewed Boolean,
    ipAddress String required,
    headers String,
    url  String,    
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
    Task{result} to TaskResult,
}

relationship ManyToOne {
    Agent{platform} to Platform
    CallBack{agent} to Agent,
    Task{agent} to Agent,    
}

relationship OneToOne {
    RegistrationEvent{agent} to Agent
    RegistrationEvent{secret} to RegistrationSecret    
}

// Set pagination options
paginate CallBack, Task, TaskResult with infinite-scroll
paginate Platform, Agent with pagination
// Use Data Transfert Objects (DTO)
// dto * with mapstruct
// Set service options to all except few
service all with serviceImpl
// Set an angular suffix
// angularSuffix * with mySuffix