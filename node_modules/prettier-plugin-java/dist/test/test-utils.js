"use strict";
/*eslint no-console: ["error", { allow: ["error"] }] */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectSnippetToBeFormatted = exports.formatJavaSnippet = exports.testRepositorySample = exports.testSample = void 0;
var chai_1 = require("chai");
var fs_extra_1 = require("fs-extra");
var path_1 = require("path");
var klaw_sync_1 = __importDefault(require("klaw-sync"));
var child_process_1 = require("child_process");
var cst_printer_1 = require("../src/cst-printer");
var java_parser_1 = require("java-parser");
var prettier_1 = require("prettier");
var printDocToString = prettier_1.doc.printer.printDocToString;
var pluginPath = path_1.resolve(__dirname, "../dist/index.js");
function testSample(testFolder, exclusive) {
    var _this = this;
    var itOrItOnly = exclusive ? it.only : it;
    var inputPath = path_1.resolve(testFolder, "_input.java");
    var expectedPath = path_1.resolve(testFolder, "_output.java");
    var relativeInputPath = path_1.relative(__dirname, inputPath);
    var inputContents;
    var expectedContents;
    // @ts-ignore
    before(function () {
        inputContents = fs_extra_1.readFileSync(inputPath, "utf8");
        expectedContents = fs_extra_1.readFileSync(expectedPath, "utf8");
    });
    itOrItOnly("can format <" + relativeInputPath + ">", function () { return __awaiter(_this, void 0, void 0, function () {
        var actual;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, prettier_1.format(inputContents, {
                        parser: "java",
                        plugins: [pluginPath]
                    })];
                case 1:
                    actual = _a.sent();
                    chai_1.expect(actual).to.equal(expectedContents);
                    return [2 /*return*/];
            }
        });
    }); });
    it("Performs a stable formatting for <" + relativeInputPath + ">", function () { return __awaiter(_this, void 0, void 0, function () {
        var onePass, secondPass;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, prettier_1.format(inputContents, {
                        parser: "java",
                        plugins: [pluginPath]
                    })];
                case 1:
                    onePass = _a.sent();
                    return [4 /*yield*/, prettier_1.format(onePass, {
                            parser: "java",
                            plugins: [pluginPath]
                        })];
                case 2:
                    secondPass = _a.sent();
                    chai_1.expect(onePass).to.equal(secondPass);
                    return [2 /*return*/];
            }
        });
    }); });
}
exports.testSample = testSample;
function testRepositorySample(testFolder, command, args) {
    describe("Prettify the repository <" + testFolder + ">", function () {
        var _this = this;
        this.timeout(0);
        var testsamples = path_1.resolve(__dirname, "../test-samples");
        var samplesDir = path_1.resolve(testsamples, path_1.basename(testFolder));
        if (fs_extra_1.existsSync(samplesDir)) {
            fs_extra_1.removeSync(samplesDir);
        }
        fs_extra_1.copySync(testFolder, samplesDir);
        var sampleFiles = klaw_sync_1.default(path_1.resolve(__dirname, samplesDir), {
            nodir: true
        });
        var javaSampleFiles = sampleFiles.filter(function (fileDesc) {
            return fileDesc.path.endsWith(".java");
        });
        javaSampleFiles.forEach(function (fileDesc) {
            it("Performs a stable formatting for <" + path_1.relative(samplesDir, fileDesc.path) + ">", function () { return __awaiter(_this, void 0, void 0, function () {
                var javaFileText, onePass, secondPass;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            javaFileText = fs_extra_1.readFileSync(fileDesc.path, "utf8");
                            return [4 /*yield*/, prettier_1.format(javaFileText, {
                                    parser: "java",
                                    plugins: [pluginPath]
                                })];
                        case 1:
                            onePass = _a.sent();
                            return [4 /*yield*/, prettier_1.format(onePass, {
                                    parser: "java",
                                    plugins: [pluginPath]
                                })];
                        case 2:
                            secondPass = _a.sent();
                            chai_1.expect(onePass).to.equal(secondPass);
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        it("verify semantic validity " + testFolder, function () {
            var code = child_process_1.spawnSync(command, args, {
                cwd: samplesDir,
                maxBuffer: Infinity
            });
            if (code.status !== 0) {
                chai_1.expect.fail("Cannot build " + testFolder + ", please check the output below:\n " + code.stdout.toString());
            }
        });
    });
}
exports.testRepositorySample = testRepositorySample;
function formatJavaSnippet(_a) {
    var snippet = _a.snippet, entryPoint = _a.entryPoint, _b = _a.prettierOptions, prettierOptions = _b === void 0 ? {} : _b;
    return __awaiter(this, void 0, void 0, function () {
        var node, options, doc;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    node = java_parser_1.parse(snippet, entryPoint);
                    options = __assign({ printWidth: 80, tabWidth: 2, trailingComma: "none", useTabs: false }, prettierOptions);
                    return [4 /*yield*/, cst_printer_1.createPrettierDoc(node, options)];
                case 1:
                    doc = _c.sent();
                    return [4 /*yield*/, printDocToString(doc, options).formatted];
                case 2: return [2 /*return*/, _c.sent()];
            }
        });
    });
}
exports.formatJavaSnippet = formatJavaSnippet;
function expectSnippetToBeFormatted(_a) {
    var snippet = _a.snippet, expectedOutput = _a.expectedOutput, entryPoint = _a.entryPoint, _b = _a.prettierOptions, prettierOptions = _b === void 0 ? {} : _b;
    return __awaiter(this, void 0, void 0, function () {
        var onePass, secondPass;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, formatJavaSnippet({
                        snippet: snippet,
                        entryPoint: entryPoint,
                        prettierOptions: prettierOptions
                    })];
                case 1:
                    onePass = _c.sent();
                    return [4 /*yield*/, formatJavaSnippet({
                            snippet: onePass,
                            entryPoint: entryPoint,
                            prettierOptions: prettierOptions
                        })];
                case 2:
                    secondPass = _c.sent();
                    chai_1.expect(onePass).to.equal(expectedOutput);
                    chai_1.expect(secondPass).to.equal(expectedOutput);
                    return [2 /*return*/];
            }
        });
    });
}
exports.expectSnippetToBeFormatted = expectSnippetToBeFormatted;
