"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var test_utils_1 = require("../../../test-utils");
describe("Class Body", function () {
    it("should handle an empty class body", function () {
        test_utils_1.expectSnippetToBeFormatted({
            snippet: "{ }",
            expectedOutput: "{}",
            entryPoint: "classBody"
        });
    });
    it("should handle a class body with one field declaration", function () {
        // prettier-ignore
        var expectedOutput = "{\n" +
            "  int i;\n" +
            "}";
        test_utils_1.expectSnippetToBeFormatted({
            snippet: "{int i;}",
            expectedOutput: expectedOutput,
            entryPoint: "classBody"
        });
    });
    it("should handle blank lines between field declarations", function () {
        // prettier-ignore
        var snippet = "{\n" +
            "  int i;\n" +
            "  int j;\n" +
            "  \n" +
            "  int k;\n" +
            "}";
        // prettier-ignore
        var expectedOutput = "{\n" +
            "  int i;\n" +
            "  int j;\n" +
            "\n" +
            "  int k;\n" +
            "}";
        test_utils_1.expectSnippetToBeFormatted({
            snippet: snippet,
            expectedOutput: expectedOutput,
            entryPoint: "classBody"
        });
    });
    it("should add exactly one blank lines between field declarations", function () {
        // prettier-ignore
        var snippet = "{\n" +
            "  int i;\n" +
            "\n" +
            "\n" +
            "  \n" +
            "  int j;\n" +
            "}";
        // prettier-ignore
        var expectedOutput = "{\n" +
            "  int i;\n" +
            "\n" +
            "  int j;\n" +
            "}";
        test_utils_1.expectSnippetToBeFormatted({
            snippet: snippet,
            expectedOutput: expectedOutput,
            entryPoint: "classBody"
        });
    });
    it("should add exactly one blank lines before method declarations", function () {
        var snippet = "{\n" +
            "  int i;\n" +
            "  void t() {}" +
            "\n" +
            "  void u() {}" +
            "\n" +
            "\n" +
            "void v() {}" +
            "}";
        var expectedOutput = "{\n" +
            "  int i;\n" +
            "\n" +
            "  void t() {}\n" +
            "\n" +
            "  void u() {}\n" +
            "\n" +
            "  void v() {}\n" +
            "}";
        test_utils_1.expectSnippetToBeFormatted({
            snippet: snippet,
            expectedOutput: expectedOutput,
            entryPoint: "classBody"
        });
    });
    describe("Empty statements", function () {
        it("should handle an class body with only empty statements", function () {
            test_utils_1.expectSnippetToBeFormatted({
                snippet: "{;;}",
                expectedOutput: "{}",
                entryPoint: "classBody"
            });
        });
        it("should handle blank lines between field declarations", function () {
            var snippet = "{\n" +
                "  int i;;int j;;\n" +
                "  int k;;\n" +
                "  ;\n" +
                "  int l;;\n" +
                "  \n" +
                "  int m;;\n" +
                "}";
            var expectedOutput = "{\n" +
                "  int i;\n" +
                "  int j;\n" +
                "  int k;\n" +
                "\n" +
                "  int l;\n" +
                "\n" +
                "  int m;\n" +
                "}";
            test_utils_1.expectSnippetToBeFormatted({
                snippet: snippet,
                expectedOutput: expectedOutput,
                entryPoint: "classBody"
            });
        });
        it("should handle blank lines before method declarations", function () {
            var snippet = "{\n" +
                "  int i;;\n" +
                "  void t() {}" +
                "\n" +
                "\n;" +
                "  void u() {}" +
                "\n;;" +
                "\n" +
                "void v() {}" +
                "}";
            var expectedOutput = "{\n" +
                "  int i;\n" +
                "\n" +
                "  void t() {}\n" +
                "\n" +
                "  void u() {}\n" +
                "\n" +
                "  void v() {}\n" +
                "}";
            test_utils_1.expectSnippetToBeFormatted({
                snippet: snippet,
                expectedOutput: expectedOutput,
                entryPoint: "classBody"
            });
        });
        it("should print comments attached to empty statement where only empty statements", function () {
            test_utils_1.expectSnippetToBeFormatted({
                snippet: "{;/* TODO */;}",
                expectedOutput: "{\n" + "  /* TODO */\n" + "}",
                entryPoint: "classBody"
            });
        });
        it("should print comments attached to empty statement between field declarations", function () {
            var snippet = "{\n" +
                "  int i;/* TODO */;int j;;\n" +
                "  int k;/* TODO */;\n" +
                "  \n" +
                "  /* TODO */;\n" +
                "  \n" +
                "  int l;;\n" +
                "}";
            var expectedOutput = "{\n" +
                "  int i;\n" +
                "  /* TODO */\n" +
                "  int j;\n" +
                "  int k;\n" +
                "\n" +
                "  /* TODO */\n" +
                "  /* TODO */\n" +
                "  int l;\n" +
                "}";
            test_utils_1.expectSnippetToBeFormatted({
                snippet: snippet,
                expectedOutput: expectedOutput,
                entryPoint: "classBody"
            });
        });
    });
});
