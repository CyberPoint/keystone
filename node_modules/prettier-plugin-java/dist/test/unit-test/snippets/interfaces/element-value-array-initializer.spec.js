"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var test_utils_1 = require("../../../test-utils");
describe("element Value Array Initializer", function () {
    it("can format a elementValueArrayInitializer", function () {
        test_utils_1.expectSnippetToBeFormatted({
            snippet: "{alpha}",
            expectedOutput: "{ alpha }",
            entryPoint: "elementValueArrayInitializer"
        });
    });
    describe("Trailing Commas", function () {
        it("should remove extra comma in elementValueArrayInitializer by default", function () {
            test_utils_1.expectSnippetToBeFormatted({
                snippet: "{alpha,}",
                expectedOutput: "{ alpha }",
                entryPoint: "elementValueArrayInitializer"
            });
        });
        it("should remove extra comma in elementValueArrayInitializer by default", function () {
            // prettier-ignore
            var expectedOutput = "{\n" +
                "  oneVeryLongArrayValue\n" +
                "}";
            test_utils_1.expectSnippetToBeFormatted({
                snippet: "{oneVeryLongArrayValue,}",
                expectedOutput: expectedOutput,
                entryPoint: "elementValueArrayInitializer",
                prettierOptions: {
                    printWidth: 15
                }
            });
        });
        it("should remove extra comma in elementValueArrayInitializer if it fit in one line and --trailing-comma='all'", function () {
            test_utils_1.expectSnippetToBeFormatted({
                snippet: "{oneVeryLongArrayValue,}",
                expectedOutput: "{ oneVeryLongArrayValue }",
                entryPoint: "elementValueArrayInitializer",
                prettierOptions: {
                    trailingComma: "all"
                }
            });
        });
        it("should not add extra comma in elementValueArrayInitializer if it fit in one line and --trailing-comma='all'", function () {
            test_utils_1.expectSnippetToBeFormatted({
                snippet: "{oneVeryLongArrayValue}",
                expectedOutput: "{ oneVeryLongArrayValue }",
                entryPoint: "elementValueArrayInitializer",
                prettierOptions: {
                    trailingComma: "all"
                }
            });
        });
        it("should keep extra comma in elementValueArrayInitializer if it does not fit in one line and --trailing-comma='all'", function () {
            // prettier-ignore
            var expectedOutput = "{\n" +
                "  oneVeryLongArrayValue/* COMMA */,\n" +
                "}";
            test_utils_1.expectSnippetToBeFormatted({
                snippet: "{oneVeryLongArrayValue /* COMMA */,}",
                expectedOutput: expectedOutput,
                entryPoint: "elementValueArrayInitializer",
                prettierOptions: {
                    printWidth: 15,
                    trailingComma: "all"
                }
            });
        });
        it("should add extra comma in elementValueArrayInitializer if it does not fit in one line and --trailing-comma='all'", function () {
            // prettier-ignore
            var expectedOutput = "{\n" +
                "  oneVeryLongArrayValue,\n" +
                "}";
            test_utils_1.expectSnippetToBeFormatted({
                snippet: "{oneVeryLongArrayValue}",
                expectedOutput: expectedOutput,
                entryPoint: "elementValueArrayInitializer",
                prettierOptions: {
                    printWidth: 15,
                    trailingComma: "all"
                }
            });
        });
    });
});
