{"version":3,"file":"account.08aeccc3.chunk.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AACA;AAMA;AACA;AAGA;AAMA;AACA;AACA;AACA;AAIA;AACA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AAOA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AACA;;AACA;AAGA;AACA;AAMA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AACA;AAGA;AAOA;AACA;AAOA;AAEA","sources":["webpack://key-stone/./src/main/webapp/app/modules/account/index.tsx","webpack://key-stone/./src/main/webapp/app/modules/account/password/password.tsx","webpack://key-stone/./src/main/webapp/app/modules/account/settings/settings.tsx"],"sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport ErrorBoundaryRoutes from 'app/shared/error/error-boundary-routes';\n\nimport Settings from './settings/settings';\nimport Password from './password/password';\n\nconst AccountRoutes = () => (\n  <div>\n    <ErrorBoundaryRoutes>\n      <Route path=\"settings\" element={<Settings />} />\n      <Route path=\"password\" element={<Password />} />\n    </ErrorBoundaryRoutes>\n  </div>\n);\n\nexport default AccountRoutes;\n","import React, { useState, useEffect } from 'react';\nimport { Translate, translate, ValidatedField, ValidatedForm } from 'react-jhipster';\nimport { Row, Col, Button } from 'reactstrap';\nimport { toast } from 'react-toastify';\n\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { savePassword, reset } from './password.reducer';\n\nexport const PasswordPage = () => {\n  const [password, setPassword] = useState('');\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(reset());\n    dispatch(getSession());\n    return () => {\n      dispatch(reset());\n    };\n  }, []);\n\n  const handleValidSubmit = ({ currentPassword, newPassword }) => {\n    dispatch(savePassword({ currentPassword, newPassword }));\n  };\n\n  const updatePassword = event => setPassword(event.target.value);\n\n  const account = useAppSelector(state => state.authentication.account);\n  const successMessage = useAppSelector(state => state.password.successMessage);\n  const errorMessage = useAppSelector(state => state.password.errorMessage);\n\n  useEffect(() => {\n    if (successMessage) {\n      toast.success(translate(successMessage));\n    } else if (errorMessage) {\n      toast.error(translate(errorMessage));\n    }\n    dispatch(reset());\n  }, [successMessage, errorMessage]);\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h2 id=\"password-title\">\n            <Translate contentKey=\"password.title\" interpolate={{ username: account.login }}>\n              Password for {account.login}\n            </Translate>\n          </h2>\n          <ValidatedForm id=\"password-form\" onSubmit={handleValidSubmit}>\n            <ValidatedField\n              name=\"currentPassword\"\n              label={translate('global.form.currentpassword.label')}\n              placeholder={translate('global.form.currentpassword.placeholder')}\n              type=\"password\"\n              validate={{\n                required: { value: true, message: translate('global.messages.validate.newpassword.required') },\n              }}\n              data-cy=\"currentPassword\"\n            />\n            <ValidatedField\n              name=\"newPassword\"\n              label={translate('global.form.newpassword.label')}\n              placeholder={translate('global.form.newpassword.placeholder')}\n              type=\"password\"\n              validate={{\n                required: { value: true, message: translate('global.messages.validate.newpassword.required') },\n                minLength: { value: 4, message: translate('global.messages.validate.newpassword.minlength') },\n                maxLength: { value: 50, message: translate('global.messages.validate.newpassword.maxlength') },\n              }}\n              onChange={updatePassword}\n              data-cy=\"newPassword\"\n            />\n            <PasswordStrengthBar password={password} />\n            <ValidatedField\n              name=\"confirmPassword\"\n              label={translate('global.form.confirmpassword.label')}\n              placeholder={translate('global.form.confirmpassword.placeholder')}\n              type=\"password\"\n              validate={{\n                required: { value: true, message: translate('global.messages.validate.confirmpassword.required') },\n                minLength: { value: 4, message: translate('global.messages.validate.confirmpassword.minlength') },\n                maxLength: { value: 50, message: translate('global.messages.validate.confirmpassword.maxlength') },\n                validate: v => v === password || translate('global.messages.error.dontmatch'),\n              }}\n              data-cy=\"confirmPassword\"\n            />\n            <Button color=\"success\" type=\"submit\" data-cy=\"submit\">\n              <Translate contentKey=\"password.form.button\">Save</Translate>\n            </Button>\n          </ValidatedForm>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default PasswordPage;\n","import React, { useEffect } from 'react';\nimport { Button, Col, Row } from 'reactstrap';\nimport { Translate, translate, ValidatedField, ValidatedForm, isEmail } from 'react-jhipster';\nimport { toast } from 'react-toastify';\n\nimport { locales, languages } from 'app/config/translation';\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport { saveAccountSettings, reset } from './settings.reducer';\n\nexport const SettingsPage = () => {\n  const dispatch = useAppDispatch();\n  const account = useAppSelector(state => state.authentication.account);\n  const successMessage = useAppSelector(state => state.settings.successMessage);\n\n  useEffect(() => {\n    dispatch(getSession());\n    return () => {\n      dispatch(reset());\n    };\n  }, []);\n\n  useEffect(() => {\n    if (successMessage) {\n      toast.success(translate(successMessage));\n    }\n  }, [successMessage]);\n\n  const handleValidSubmit = values => {\n    dispatch(\n      saveAccountSettings({\n        ...account,\n        ...values,\n      })\n    );\n  };\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h2 id=\"settings-title\">\n            <Translate contentKey=\"settings.title\" interpolate={{ username: account.login }}>\n              User settings for {account.login}\n            </Translate>\n          </h2>\n          <ValidatedForm id=\"settings-form\" onSubmit={handleValidSubmit} defaultValues={account}>\n            <ValidatedField\n              name=\"firstName\"\n              label={translate('settings.form.firstname')}\n              id=\"firstName\"\n              placeholder={translate('settings.form.firstname.placeholder')}\n              validate={{\n                required: { value: true, message: translate('settings.messages.validate.firstname.required') },\n                minLength: { value: 1, message: translate('settings.messages.validate.firstname.minlength') },\n                maxLength: { value: 50, message: translate('settings.messages.validate.firstname.maxlength') },\n              }}\n              data-cy=\"firstname\"\n            />\n            <ValidatedField\n              name=\"lastName\"\n              label={translate('settings.form.lastname')}\n              id=\"lastName\"\n              placeholder={translate('settings.form.lastname.placeholder')}\n              validate={{\n                required: { value: true, message: translate('settings.messages.validate.lastname.required') },\n                minLength: { value: 1, message: translate('settings.messages.validate.lastname.minlength') },\n                maxLength: { value: 50, message: translate('settings.messages.validate.lastname.maxlength') },\n              }}\n              data-cy=\"lastname\"\n            />\n            <ValidatedField\n              name=\"email\"\n              label={translate('global.form.email.label')}\n              placeholder={translate('global.form.email.placeholder')}\n              type=\"email\"\n              validate={{\n                required: { value: true, message: translate('global.messages.validate.email.required') },\n                minLength: { value: 5, message: translate('global.messages.validate.email.minlength') },\n                maxLength: { value: 254, message: translate('global.messages.validate.email.maxlength') },\n                validate: v => isEmail(v) || translate('global.messages.validate.email.invalid'),\n              }}\n              data-cy=\"email\"\n            />\n            <ValidatedField type=\"select\" id=\"langKey\" name=\"langKey\" label={translate('settings.form.language')} data-cy=\"langKey\">\n              {locales.map(locale => (\n                <option value={locale} key={locale}>\n                  {languages[locale].name}\n                </option>\n              ))}\n            </ValidatedField>\n            <Button color=\"primary\" type=\"submit\" data-cy=\"submit\">\n              <Translate contentKey=\"settings.form.button\">Save</Translate>\n            </Button>\n          </ValidatedForm>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default SettingsPage;\n"],"names":[],"sourceRoot":""}